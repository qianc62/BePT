// JavaCup specification for a graph definition of the type generated by `dot'
package att.grappa;

// The next 18 comment line need to be manually copied to Parser.java after JavaCup generation.
/**
 * This class provides a parser for the <i>dot</i> graph representation format.
 * It is used in conjunction with JavaCup, a yacc-like parser generator
 * originally by:
 * <p>
 * <center>
 * <a href="http://www.cc.gatech.edu/gvu/people/Faculty/Scott.E.Hudson.html">Scott E. Hudson</a><br>
 * Graphics Visualization and Usability Center<br>
 * Georgia Institute of Technology<br>
 * </center>
 * </p>
 * and more recently modified and maintained by
 * <a href="http://www.cs.princeton.edu/~appel/modern/java/CUP/">
 * a number of people at Princeton University</a>.
 *
 * @version 1.2, 14 Feb 2001; Copyright 1996 - 2001 by AT&T Corp.
 * @author  <a href="mailto:john@research.att.com">John Mocenigo</a>, <a href="http://www.research.att.com">Research @ AT&T Labs</a>
 */

import java.io.*;
import java.util.*;
import java_cup.runtime.*;

action code {:
  // a list of variables used in action code during grammar translation
  //Parser parser = null;
  Subgraph rootSubgraph;
  Subgraph lastSubgraph;
  Graph    graph;
  Subgraph thisGraph;
  Node     thisNode;
  Edge     thisEdge;
  Node     fromNode;
  Node     toNode;
  String      portName = null;
  String      toPortName;
  String      fromPortName;
  int         thisAttrType;
  int         thisElemType;
  boolean directed = true;
  String      graphType;
  private int anon_id = 0;
  Vector attrs = new Vector(8,4);
  Vector nodes = new Vector(8,4);
  Vector edges = new Vector(8,4);

  void appendAttr(String name, String value) {
    attrs.addElement(new Attribute(thisElemType,name,value));
  }

  void noMacros() {
    parser.report_error("attribute macros are not supported yet", null);
  }

  void attrStmt(int kind, String macroName) {
    if(macroName != null) {
      noMacros();
      return;
    }
    if(attrs.size() == 0) return;
    Attribute attr = null;
    for(int i = 0; i < attrs.size(); i++) {
      if((attr = (Attribute)(attrs.elementAt(i))).getValue() == null) {
	// null means to not attach the attribute to an element
	continue;
      } else {
	switch(kind) {
	case Grappa.NODE:
	  parser.debug_message(1, "adding node default attr (" + attr.getName() + ") to thisGraph(" + thisGraph.getName() + ")");
	  thisGraph.setNodeAttribute(attr);
	  break;
	case Grappa.EDGE:
	  parser.debug_message(1, "adding edge default attr (" + attr.getName() + ") to thisGraph(" + thisGraph.getName() + ")");
	  thisGraph.setEdgeAttribute(attr);
	  break;
	case Grappa.SUBGRAPH:
	  parser.debug_message(1, "adding subg default attr (" + attr.getName() + ") to thisGraph(" + thisGraph.getName() + ")");
	  thisGraph.setAttribute(attr);
	  break;
	}
      }
    }
    attrs.removeAllElements();
  }

  void startGraph(String name, boolean type, boolean strict) {
    if(graph == null) {
      graph = new Graph(name, type, strict);
    } else {
      graph.reset(name, type, strict);
    }
    directed = type;
    rootSubgraph = (Subgraph)graph;
    parser.debug_message(1, "Creating top level graph (" + name + ")");
    anon_id = 0;
  }

  void openGraph() {
    thisGraph = rootSubgraph;
    thisElemType = Grappa.SUBGRAPH;
    parser.debug_message(1, "thisGraph(" + thisGraph.getName() + ")");
  }

  void closeGraph() {
    int level = 1;

    if(parser.getErrorWriter() != null && parser.getDebugLevel() >= level) {
               
      parser.debug_message(level, "parsed graph follows:");
      rootSubgraph.printSubgraph(parser.getErrorWriter());
    }
  }

  void openSubg(String name) {
    thisGraph = new Subgraph(thisGraph, name);
    parser.debug_message(1, "thisGraph(" + thisGraph.getName() + ")");
    thisElemType = Grappa.SUBGRAPH;
  }

  String anonStr() {
    return Grappa.ANONYMOUS_PREFIX + anon_id++;
  }

  void closeSubg() {
    lastSubgraph = thisGraph;
    // getSubgraph() gets the parent subgraph
    thisGraph = thisGraph.getSubgraph();
    if(thisGraph == null) {
      parser.report_error ("parser attempted to go above root Subgraph", null);
      thisGraph = rootSubgraph;
    }
    parser.debug_message(1, "Created subgraph (" + lastSubgraph.getName() + ") in subgraph (" + thisGraph.getName() + ")...");
    parser.debug_message(1, "thisGraph(" + thisGraph.getName() + ")");
  }

  void appendNode(String name, String port) {
    if((thisNode = rootSubgraph.findNodeByName(name)) == null) {
      parser.debug_message(1, "Creating node in subgraph (" + thisGraph.getName() + ")...");
      thisNode = new Node(thisGraph, name);
    } else {
      parser.debug_message(1, "Node already in subgraph (" + thisNode.getSubgraph().getName() + ")...");
    }
    Object[] pair = new Object[2];
    pair[0] = thisNode;
    pair[1] = port;
    nodes.addElement(pair);
    parser.debug_message(1, "thisNode(" + thisNode.getName() + ")");
    thisElemType = Grappa.NODE;
  }

  void nodeWrap() {
    Object[] pair = null;
    if(nodes.size() > 0 && attrs.size() > 0) {
      for(int i = 0; i < nodes.size(); i++) {
	pair = (Object[])(nodes.elementAt(i));
	applyAttrs((Element)pair[0],null,null);
      }
    }
    attrs.removeAllElements();
    nodes.removeAllElements();
  }

  void bufferEdges() {
    Object[] pair = new Object[2];
    if(nodes.size() > 0) {
      pair[0] = nodes;
      nodes = new Vector(8,4);
      pair[1] = new Boolean(true);
    } else if(lastSubgraph != null) {
      pair[0] = lastSubgraph;
      lastSubgraph = null;
      pair[1] = new Boolean(false);
    } else {
      parser.report_error ("EDGE_OP without clear antecedent nodelist or subgraph", null);
      return;
    }
    edges.addElement(pair);
  }

  void edgeWrap() {
    bufferEdges();
    Attribute key = null;
    Attribute name = null;
    Attribute attr = null;
    int skip = -1;
    for(int i = 0; i < attrs.size(); i++) {
      attr = (Attribute)(attrs.elementAt(i));
      if(attr.getName().equals("key")) {
	key = attr;
	if(name != null)
	    break;
      } else if(attr.getName().equals("__nAmE__")) {
	name = attr;
	if(key != null)
	    break;
      }
    }
    Object[] tailPair = (Object[])(edges.elementAt(0));
    Object[] headPair = null;
    // note: when node list is used, a non-null name will cause errors
    //       due to lack of uniqueness
    for(int i = 1; i < edges.size(); i++) {
      headPair = (Object[])(edges.elementAt(i));
      if(((Boolean)(tailPair[1])).booleanValue()) { // true if node list
	Vector list = (Vector)(tailPair[0]);
	Object[] nodePair = null;
	for(int j = 0; j < list.size(); j++) {
	  nodePair = (Object[])(list.elementAt(j));
	  edgeRHS((Node)(nodePair[0]),(String)(nodePair[1]),headPair,key,name);
	}
	list.removeAllElements();
      } else {
	Subgraph subg = (Subgraph)(tailPair[0]);
	Enumeration enum = subg.elements(Grappa.NODE);
	while(enum.hasMoreElements()) {
	  edgeRHS((Node)(enum.nextElement()),null,headPair,key,name);
	}
      }
      tailPair = headPair;
    }
    edges.removeAllElements();
    attrs.removeAllElements();
  }

  void edgeRHS(Node tail, String tailPort, Object[] headPair, Attribute keyAttr, Attribute nameAttr) {
    String key = (keyAttr == null) ? null : keyAttr.getStringValue();
    String name = (nameAttr == null) ? null : nameAttr.getStringValue();
    if(((Boolean)(headPair[1])).booleanValue()) { // true if node list
      Vector list = (Vector)(headPair[0]);
      Object[] nodePair = null;
      for(int j = 0; j < list.size(); j++) {
	nodePair = (Object[])(list.elementAt(j));
	thisEdge = new Edge(thisGraph, tail, tailPort, (Node)(nodePair[0]), (String)(nodePair[1]), key, name);
	parser.debug_message(1, "Creating edge in subgraph (" + thisGraph.getName() + ")...");
	parser.debug_message(1, "thisEdge(" + thisEdge.getName() + ")");
	thisElemType = Grappa.EDGE;
	applyAttrs((Element)thisEdge,keyAttr,nameAttr);
      }
    } else {
      Subgraph subg = (Subgraph)(headPair[0]);
      Enumeration enum = subg.elements(Grappa.NODE);
      while(enum.hasMoreElements()) {
	thisEdge = new Edge(thisGraph, tail, tailPort, (Node)(enum.nextElement()), null, key, name);
	parser.debug_message(1, "Creating edge in subgraph (" + thisGraph.getName() + ")...");
	parser.debug_message(1, "thisEdge(" + thisEdge.getName() + ")");
	thisElemType = Grappa.EDGE;
	applyAttrs((Element)thisEdge,keyAttr,nameAttr);
      }
    }
  }

  void applyAttrs(Element elem, Attribute skip1, Attribute skip2) {
    Attribute attr = null;
    for(int i = 0; i < attrs.size(); i++) {
      attr = (Attribute)attrs.elementAt(i);
      if(attr == skip1) continue;
      else if(attr == skip2) continue;
      elem.setAttribute(attr);
    }
  }
:};

// a method to get the final result from caller to the parser
parser code {:
  private Graph theGraph = null;
  private Reader inReader;
  private PrintWriter errWriter;
  private Lexer lexer;
  private int debugLevel = 0;

  /**
   * Create an instance of <code>Parser</code> with input, error output and
   * a supplied <code>Graph</code> object.  The graph object is cleared (reset) before
   * new graph components are added to it by this parsing operation.
   *
   * @param inputReader input <code>Reader</code> object
   * @param errorWriter error output <code>Writer</code> object (or null to suppress error output)
   * @param graph <code>Graph</code> object for storing parsed graph information (or null to create a new object)
   */
  public Parser (Reader inputReader, PrintWriter errorWriter, Graph graph) {
    super ();
    inReader = inputReader;
    errWriter = errorWriter;
    theGraph = graph;
    lexer = new Lexer (inputReader, errorWriter);
  }

  /**
   * A convenience constructor equivalent to <code>Parser(inputReader,errorWriter,null)</code>.
   *
   * @param inputReader input <code>Reader</code> object
   * @param errorWriter error output <code>Writer</code> object (or null to suppress error output)
   */
  public Parser (Reader inputReader, PrintWriter errorWriter) {
    this(inputReader,errorWriter,null);
  }

  /**
   * A convenience constructor equivalent to <code>Parser(inputReader,null,null)</code>.
   *
   * @param inputReader input <code>Reader</code> object
   */
  public Parser (Reader inputReader) {
    this(inputReader,(PrintWriter)null,null);
  }

  /**
   * Create an instance of <code>Parser</code> with input, error output and
   * a supplied <code>Graph</code> object.  The input stream is converted to
   * a <code>Reader</code> and the error stream is converted to a <code>Writer</code>.
   *
   * @param inputStream input <code>InputStream</code> object
   * @param errorStream error output <code>OutputStream</code> object (or null to suppress error output)
   * @param graph <code>Graph</code> object for storing parsed graph information (or null to create a new object)
   */
  public Parser (InputStream inputStream, OutputStream errorStream, Graph graph) {
    this(new InputStreamReader(inputStream),new PrintWriter(errorStream,true),graph);
  }

  /**
   * A convenience constructor equivalent to <code>Parser(inputStream,errorStream,null)</code>.
   *
   * @param inputStream input <code>InputStream</code> object
   * @param errorStream error output <code>OutputStream</code> object
   */
  public Parser (InputStream inputStream, OutputStream errorStream) {
    this(new InputStreamReader(inputStream),new PrintWriter(errorStream,true),null);
  }

  /**
   * A convenience constructor equivalent to <code>Parser(inputStream,null,null)</code>.
   *
   * @param inputStream input <code>InputStream</code> object
   */
  public Parser (InputStream inputStream) {
    this(new InputStreamReader(inputStream),(PrintWriter)null,null);
  }

  /**
   * Get the <code>Lexer</code> object associated with this parser.
   *
   * @return the associated lexical analyzer.
   */
  public Lexer getLexer() {
    return lexer;
  }

  /**
   * Get the error writer, if any, for this parser.
   *
   * @return the error writer for this parser.
   */
  public PrintWriter getErrorWriter() {
    return(errWriter);
  }

  /**
   * Get the debug level for this parser.
   * The debug level is set to a non-zero value by calling <code>debug_parse</code>.
   *
   * @return the debug level of this parser.
   * @see Parser#debug_parse(int)
   */
  public int getDebugLevel() {
    return(debugLevel);
  }

  /**
   * Report a fatal error.
   * Calling this method will throw a <code>GraphParserException</code>.
   *
   * @param message the error message to send to the error stream and include in the thrown exception
   * @param info not used
   *
   * @exception GraphParserException whenver this method is called
   */
  public void report_error(String message, Object info) throws GraphParserException {
    String loc = getLexer().getLocation();
    if(errWriter != null) {
      errWriter.println("ERROR: Parser" + loc + ": " + message);
    }
    throw new GraphParserException("at " + loc + ": " + message);
  }

  /**
   * Report a non-fatal error.
   *
   * @param message the warning message to send to the error stream, if the stream non-null.
   * @param info not used
   */
  public void report_warning(String message, Object info) {
    String loc = getLexer().getLocation();
    if(errWriter != null) {
      errWriter.println("WARNING: Parser" + loc + ": " + message);
    }
  }

  /**
   * Write a debugging message to the error stream.
   * The debug level of the message is 5.
   *
   * @param message the debug message to send to the error stream, if the stream non-null.
   * @see Parser#debug_message(int,String)
   */
  public void debug_message(String message) {
    debug_message(5, message);
  }

  /**
   * Write a debugging message to the error stream.
   * A message is written only if the error stream is not null and the
   * debug level of the message is greater than or equal to the debugging
   * level of the parser.
   *
   * @param level the level of the message
   * @param message the debug message to send to the error stream, if the stream non-null.
   * @see Parser#getDebugLevel()
   */
  public void debug_message(int level, String message) {
    if(debugLevel < level) {
      return;
    }
    String loc = getLexer().getLocation();
    if(errWriter != null) {
      errWriter.println("DEBUG: Parser" + loc + ": " + message);
    }
  }

  /**
   * Invokes the parser in debug mode.
   * The lowering the debug level reduces the amount of debugging output.
   * A level of 0 inhibits all debugging messages, generally a level of 10
   * will let all messages get through.
   *
   * @param debug the debug level to use for filtering debug messages based on priority. 
   * @exception Exception if <code>parse()</code> does
   */
  public Symbol debug_parse(int debug) throws java.lang.Exception {
    if(debug == 0) {
      return parse();
    }

    debugLevel = debug;

    /* the current action code */
    int act;

    /* the Symbol/stack element returned by a reduce */
    Symbol lhs_sym = null;

    /* information about production being reduced with */
    short handle_size, lhs_sym_num;

    /* set up direct reference to tables to drive the parser */
    production_tab = production_table();
    action_tab     = action_table();
    reduce_tab     = reduce_table();

    debug_message(5, "# Initializing parser");

    /* initialize the action encapsulation object */
    init_actions();

    /* do user initialization */
    user_init();

    /* the current Symbol */
    cur_token = scan(); 

    debug_message(5, "# Current Symbol is #" + cur_token.sym);

    /* push dummy Symbol with start state to get us underway */
    stack.push(new Symbol(0, start_state()));
    tos = 0;

    /* continue until we are told to stop */
    for (_done_parsing = false; !_done_parsing; )
      {
	/* current state is always on the top of the stack */

	/* look up action out of the current state with the current input */
	act = get_action(((Symbol)stack.peek()).parse_state, cur_token.sym);

	/* decode the action -- > 0 encodes shift */
	if (act > 0)
	  {
	    /* shift to the encoded state by pushing it on the stack */
	    cur_token.parse_state = act-1;
	    debug_shift(cur_token);
	    stack.push(cur_token);
	    tos++;

	    /* advance to the next Symbol */
	    cur_token = scan();
	    debug_message(5, "# Current token is #" + cur_token.sym);
	  }
	/* if its less than zero, then it encodes a reduce action */
	else if (act < 0)
	  {
	    /* perform the action for the reduce */
	    lhs_sym = do_action((-act)-1, this, stack, tos);

	    /* look up information about the production */
	    lhs_sym_num = production_tab[(-act)-1][0];
	    handle_size = production_tab[(-act)-1][1];

	    debug_reduce((-act)-1, lhs_sym_num, handle_size);

	    /* pop the handle off the stack */
	    for (int i = 0; i < handle_size; i++)
	      {
		stack.pop();
		tos--;
	      }
	      
	    /* look up the state to go to from the one popped back to */
	    act = get_reduce(((Symbol)stack.peek()).parse_state, lhs_sym_num);

	    /* shift to that state */
	    lhs_sym.parse_state = act;
	    stack.push(lhs_sym);
	    tos++;

	    debug_message(5, "# Goto state #" + act);
	  }
	/* finally if the entry is zero, we have an error */
	else if (act == 0)
	  {
	    /* call user syntax error reporting routine */
	    syntax_error(cur_token);

	    /* try to error recover */
	    if (!error_recovery(true))
	      {
		/* if that fails give up with a fatal syntax error */
		unrecovered_syntax_error(cur_token);

		/* just in case that wasn't fatal enough, end parse */
		done_parsing();
	      } else {
		lhs_sym = (Symbol)stack.peek();
	      }
	  }
      }
    return lhs_sym;
  }

  CUP$Parser$actions getActionObject () {
    return action_obj;
  }

  /**
   * Get the graph resulting from the parsing operations.
   *
   * @return the graph generated from the input.
   */
  public Graph getGraph () {
    return action_obj.graph;
  }
:};

// Preliminaries to set up and use the scanner.
init with {:
  lexer.init();
  action_obj.graph = theGraph;
  //action_obj.parser = this;
:};
scan with {: return lexer.next_token(debugLevel); :};

// Terminals (tokens returned by the scanner).
terminal Integer     GRAPH, NODE, EDGE, SUBGRAPH, D_EDGE_OP, ND_EDGE_OP;
terminal             STRICT, DIGRAPH, STRICTGRAPH, STRICTDIGRAPH;
terminal             SEMI, COMMA, LCUR, RCUR, LBR, RBR, EQUAL, COLON, ATSIGN;
terminal String      ATOM;

// Non terminals
non terminal Boolean optStrict, graphType, rCompound;
non terminal Integer attrType;
non terminal String  optSubgHdr, optGraphName, optMacroName, optPort;
non terminal graph, hdr, body, optStmtList, stmtList, stmt;
non terminal attrStmt, optSemi, optSeparator, compound, simple, optAttr;
non terminal nodeList, subgraph, node, attrList, graphAttrDefs, optAttrDefs;
non terminal attrDefs, attrItem, attrAssignment, attrMacro, edge_op;

start with graph;

// the grammar

graph ::= hdr
          {:
	    openGraph();
          :} body
          {:
	    closeGraph();
          :}
      |   error:val
          {:
	    //CUP$parser.report_error ("An error was encountered while graph parsing (" + val.toString() + ").", null);
	    parser.report_error ("An error was encountered while graph parsing (" + val.toString() + ").", null);
          :}
      |   /* empty */
          {:
             graph = new Graph("empty");
             //((Parser)(CUP$parser)).report_warning ("The graph to parse is empty.", null);
             ((Parser)(parser)).report_warning ("The graph to parse is empty.", null);
          :}
      ;

hdr ::= optStrict:strict graphType:type optGraphName:name
        {:
          startGraph(name,type.booleanValue(),strict.booleanValue());
        :}
    |   STRICTGRAPH optGraphName:name
        {:
          startGraph(name,true,false);
        :}
    |   STRICTDIGRAPH optGraphName:name
        {:
          startGraph(name,true,true);
        :}
    ;

optStrict ::= STRICT 
              {:
                RESULT = new Boolean(true);
              :}
          |   /* empty */
              {:
                RESULT = new Boolean(false);
              :}
          ;

graphType ::= GRAPH 
              {:
                RESULT = new Boolean(false);
              :}
          |   DIGRAPH
              {:
                RESULT = new Boolean(true);
              :}
          ;


optGraphName ::= ATOM:val 
                 {:
                   RESULT = val;
                 :}
             |   // empty
                 {:
                   RESULT = anonStr();
                 :}
             ;

body ::= LCUR optStmtList RCUR
     ;

optStmtList ::= stmtList
            |   // empty
            ;

stmtList ::= stmtList stmt
         |   stmt
         ;

stmt ::= attrStmt optSemi
     |   compound optSemi
     ;

compound ::= simple rCompound:val optAttr
             {:
               if (val.booleanValue()) edgeWrap();
               else nodeWrap();
             :}
         ;

simple ::= nodeList
       |   subgraph
       ;

edge_op ::= D_EDGE_OP
            {:
	      if(!directed) {
		//CUP$parser.report_error ("attempt to create a directed edge in a non-directed graph",null);
		parser.report_error ("attempt to create a directed edge in a non-directed graph",null);
	      }
	    :}
        |   ND_EDGE_OP
            {:
	      if(directed) {
		//CUP$parser.report_error ("attempt to create a non-directed edge in a directed graph",null);
		parser.report_error ("attempt to create a non-directed edge in a directed graph",null);
	      }
	    :}
        ;

rCompound ::= edge_op
              {:
		thisElemType = Grappa.EDGE;
                bufferEdges();
              :} simple rCompound:val
              {:
		thisElemType = Grappa.EDGE;
                RESULT = new Boolean(true);
              :}
          |   // empty
              {:
		thisElemType = Grappa.NODE;
                RESULT = new Boolean(false);
              :}
          ;

nodeList ::= node
         |   nodeList COMMA node
         ;

node ::= ATOM:name optPort:port
         {:
           appendNode(name,port);
         :}
     ;

optPort ::= COLON ATOM:val // ignore port IDs
            {:
              RESULT = val;
            :}
        |   // empty
            {:
              RESULT = null;
            :}
        ;

attrStmt ::= attrType:type optMacroName:name attrList
             {:
               attrStmt(type.intValue(),name);
             :}
         |   graphAttrDefs
             {:
               attrStmt(Grappa.SUBGRAPH,null);
             :}
         ;

attrType ::= GRAPH:val
             {:
               RESULT = new Integer(Grappa.SUBGRAPH);
             :}
         |   NODE:val
             {:
               RESULT = new Integer(Grappa.NODE);
             :}
         |   EDGE:val
             {:
               RESULT = new Integer(Grappa.EDGE);
             :}
         ;

optMacroName ::= ATOM:val EQUAL
                 {:
                   RESULT = val;
                 :}
             |   // empty
                 {:
                   RESULT = null;
                 :}
             ;

optAttr ::= attrList
        |   // empty
        ;

attrList ::= optAttr LBR optAttrDefs RBR
         ;

optAttrDefs ::= attrDefs
            |   // empty
            ;

attrDefs ::= attrItem
         |   attrDefs optSeparator attrItem
         ;

attrItem ::= attrAssignment
         |   attrMacro
         ; 

attrAssignment ::= ATOM:name EQUAL ATOM:value
                   {:
                     appendAttr(name,value);
                   :}
               ;

attrMacro ::= ATSIGN ATOM:name // not yet implemented
              {:
                appendAttr(name,null);
              :}
          ;

graphAttrDefs ::= attrAssignment
              ;

subgraph ::= optSubgHdr:val
             {:
               openSubg(val);
             :} body
             {:
               closeSubg();
             :}
         ;

optSubgHdr ::= SUBGRAPH ATOM:val
               {:
                 RESULT = val;
               :}
           |   SUBGRAPH
               {:
                 RESULT = anonStr();
               :}
           |   // empty
               {:
                 RESULT = anonStr();
               :}
           ;

optSemi ::= SEMI
        |   // empty
        ;

optSeparator ::= SEMI
             |   COMMA
             |   // empty
             ;
