/* Generated By:JavaCC: Do not edit this line. TpnParser.java */
package org.processmining.importing.tpn;

import java.util.*;
import org.processmining.framework.models.petrinet.*;

public class TpnParser implements TpnParserConstants {
    private void addPlace(PetriNet net, String placeName, int init) throws ParseException {
        Place p = net.findPlace(placeName);

        if (p == null) {
            p = net.addPlace(placeName);
        }
        for (int i = 0; i < init; i++) {
            p.addToken(new org.processmining.framework.models.petrinet.Token());
        }
    }

    private void addTrans(PetriNet net, String name, String label, ArrayList in, ArrayList out)
            throws ParseException {
        // create transition
        Transition t = net.addTransition(new Transition(name, net));

        // create ingoing arcs
        for (int i = 0; i < in.size(); i++) {
            String placeName = in.get(i).toString();
            Place p = net.findPlace(placeName);

            if (p == null) {
                p = net.addPlace(placeName);
            }
            if (!net.addEdge(p, t)) {
                throw new ParseException("ingoing arc '" + placeName + "' declared twice");
            }
        }

        // create outgoing arcs
        for (int i = 0; i < out.size(); i++) {
            String placeName = out.get(i).toString();
            Place p = net.findPlace(placeName);

            if (p == null) {
                p = net.addPlace(placeName);
            }
            if (!net.addEdge(t, p)) {
                throw new ParseException("outgoing arc '" + placeName + "' declared twice");
            }
        }
    }

    private String stripQuotes(String s) {
        return s.length() >= 2 && s.charAt(0) == '"' && s.charAt(s.length() - 1) == '"'
            ? s.substring(1, s.length() - 1)
            : s;
    }

  final public PetriNet Start() throws ParseException {
  PetriNet net = new PetriNet();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
        Place(net);
        break;
      case 2:
        Trans(net);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
    {if (true) return net;}
    throw new Error("Missing return statement in function");
  }

  final public void Place(PetriNet net) throws ParseException {
  Token placeName, init = null;
    jj_consume_token(1);
    placeName = jj_consume_token(NAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 3:
      jj_consume_token(3);
      init = jj_consume_token(NUMBER);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(8);
      addPlace(net, stripQuotes(placeName.toString()), init == null ? 0 : Integer.parseInt(init.toString()));
  }

  final public void Trans(PetriNet net) throws ParseException {
  Token transName, label = null; ArrayList in = new ArrayList(), out = new ArrayList();
    jj_consume_token(2);
    transName = jj_consume_token(NAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      label = jj_consume_token(NAME);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 5:
      jj_consume_token(5);
      in = Arcs();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
      jj_consume_token(6);
      out = Arcs();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(8);
      addTrans(net, stripQuotes(transName.toString()), label == null ? "" : label.toString(), in, out);
  }

  final public ArrayList Arcs() throws ParseException {
  ArrayList arcs = new ArrayList(); String s;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      s = Arc();
                arcs.add(s);
    }
      {if (true) return arcs;}
    throw new Error("Missing return statement in function");
  }

  final public String Arc() throws ParseException {
  Token name;
    name = jj_consume_token(NAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      jj_consume_token(NUMBER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 4:
      case NUMBER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          jj_consume_token(NUMBER);
          break;
        case 4:
          jj_consume_token(4);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
      {if (true) return stripQuotes(name.toString());}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public TpnParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x6,0x6,0x8,0x80,0x20,0x40,0x200,0x410,0x410,0x400,};
   }

  /** Constructor with InputStream. */
  public TpnParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TpnParser(java.io.InputStream stream, String encoding) {
    jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
    token_source = new TpnParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    jj_input_stream.ReInit(stream, encoding, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public TpnParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TpnParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public TpnParser(TpnParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TpnParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[15];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 15; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
