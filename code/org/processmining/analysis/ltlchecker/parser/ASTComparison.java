/***********************************************************
 *      This software is part of the ProM package          *
 *             http://www.processmining.org/               *
 *                                                         *
 *            Copyright (c) 2003-2006 TU/e Eindhoven       *
 *                and is licensed under the                *
 *            Common Public License, Version 1.0           *
 *        by Eindhoven University of Technology            *
 *           Department of Information Systems             *
 *                 http://is.tm.tue.nl                     *
 *                                                         *
 **********************************************************/

package org.processmining.analysis.ltlchecker.parser;

/* Generated By:JJTree: Do not edit this line. ASTComparison.java */

import java.util.TreeSet;

public class ASTComparison extends SimpleNode {
	/** Strings is a container of all the strings is the set. */
	TreeSet strings;

	/** The lefthand side attribute:*/
	Attribute attr;

	public void setAttribute(Attribute attr) {
		this.attr = attr;
	}

	public Attribute getAttribute() {
		return this.attr;
	}

	public void setStrings(TreeSet strings) {
		this.strings = strings;
	}

	public TreeSet getStrings() {
		return this.strings;
	}

	public ASTComparison(int id) {
		super(id);
	}

	public ASTComparison(LTLParser p, int id) {
		super(p, id);
	}

    public String toString(boolean verbose) {
        return super.toString() + ": attr=" + (attr == null ? "null" : attr.toString(verbose)) + ", strings=" + strings;
    }
    
	public String asParseableString() {
		String result = attr.asParseableValue() + " ";
		
		if (getType() == IN) {
			result += "in [ ";
			boolean first = true;
			for (Object o : strings) {
				if (!first) { result += ", "; } else { first = false; }
				result += "\"" + ((String) o) + "\"";
			}
			return result + " ] ";
		}
		switch (getType()) {
		case EQUAL: result += "=="; break;
		case NOTEQUAL: result += "!="; break;
		case LESSOREQUAL: result += "<="; break;
		case BIGGEROREQUAL: result += ">="; break;
		case LESSER: result += "<"; break;
		case BIGGER: result += ">"; break;
		case REGEXPEQUAL: result += "~="; break;
		default:
			assert(false);
		};
		
		assert(children != null);
		assert(children.length == 2);
		assert(children[1] != null);
		
		SimpleNode n = (SimpleNode) children[1];
		result += n.asParseableString();
		
		return result;
	}
}
