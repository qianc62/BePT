/** * LTLParser is a JavaCC file to implement a parser for the LTL language * used for specifying properties about workflow logs of processes used in the * ProM framework. * * version	:   0.1 * date		:   25102004 * author	:   HT de Beer */options {    MULTI=true;}PARSER_BEGIN(LTLParser)package org.processmining.analysis.ltlchecker.parser;import java.io.*;import java.util.*;public class LTLParser {/** * LTLParser is an parser for the LTL-language used in a LTL checking plugin * for the ProM framework. * * @version 0.1 * @author HT de Beer */    /* Fields */    /** Constants used for denoting types of attributes. */    final static int NUMBER	= 0;    final static int SET	= 1;    final static int STRING	= 2;    final static int DATE	= 3;    final static int FORMULA	= 5;    final static int FINAL	= 6;    /** attributes contains the by this parser recognized defined     * attributes.     */    static AttributeSet attributes;        /** renamings contains the by this parser recognized defined renamings of     * already defined attributes.     */    static RenamingSet renamings;    /** formulae contains the by this parser recognized defined formulae.     */    static FormulaSet formulae;    /** Parameterized formula saves their parameter data.    */    static ParameterSet parameters;/* Methods */        /** Construct a new LTLParser with new empty sets, before parsing, no     * attributes, renamings or formulae are defined.     */    public void init() {	attributes = new AttributeSet();	renamings = new RenamingSet();	formulae = new FormulaSet();	parameters = new ParameterSet();    }    /** Compute the type of an attribute.     *      * @param id The token of which the type is to be found.     *     * @return The integer denoting the type.     */    public static int getType( String s ) {	Attribute a = new Attribute("", -1);	int result = -1;	if (attributes.exists(s)) {	    // id is an attribute, get type.	    a = attributes.get(s);	} else if (renamings.exists(s)) {	    // id is an renaming, get type of corresponding attr.	    a = attributes.get((String) renamings.get(s));	} else if (formulae.exists(s)) {	    // id is an formula	    Node n = formulae.get(s);	    if ( n instanceof ASTFinalFormula) {		result = FINAL;	    } else {		// it must be a parameterized formula		result = FORMULA;	    };	};	if (a instanceof NumberAttribute ) {	    result = NUMBER;	} else if (a instanceof SetAttribute) {	    result =  SET;	} else if (a instanceof StringAttribute) {	    result =  STRING;	} else if (a instanceof DateAttribute) {	    result = DATE;	};	return result;    }        public static int getType( Token id ) {	return getType( id.image );    }    /** Get the place information (line column) of a token.     *      * @param t The token from which the place information is returned.     *     * @return The place information of token.     */    public static String at( Token t ) {	return " at " + t.beginLine + "," + t.beginColumn + " ";    }    /** Get the token text between quotes.     *     * @param t The token which text is placed between quotes.     *     * @return The token tekst of t.     */    public static String quote( Token t ) {	return "'" + t.image + "'";    }    /** Get the set of defined attributes.     *     * @return The set of defined attributes.     */    public AttributeSet getAttributeSet() {	return this.attributes;    }    /** Get the set of defined renamings.     *     * @return The set of defined renamings.     */    public RenamingSet getRenamingSet() {	return this.renamings;    }    /** Get the set of defined formulae.     *      * @return The set of defined formulae.     */    public FormulaSet getFormulaSet() {	return this.formulae;    }    static private boolean idAlreadyExists( Token t ) {	boolean result = false;	String s = t.image;	if (attributes.exists(s)) {	    result = true;	} else if (renamings.exists(s)) {	    result = true;	} else if (formulae.exists(s)) {	    result = true;	};	return result;    }    static private boolean isAttributeId( Token t ) {	boolean result = false;	String s = t.image;		if (attributes.exists(s)) {	    result = true;	} else if (renamings.exists(s)) {	    result = true;	};	return result;    }    static private boolean hasSetType( Attribute a ) {	boolean result = false;	if ( a instanceof SetAttribute ) {	    result = true;	};	return result;    }    static private boolean isFormulaId( Token t ) {	boolean result = false;	String s = t.image;	if (formulae.exists(s)) {	    result = true;	};	return result;    }	}PARSER_END(LTLParser)/*  * Standard form of white space: spaces, interlines (on unix, dos an mac way). */SKIP :{    " "|   "\t"|   "\n"|   "\r"|   "\f"}/**  * Comments are `the unix way' whit a #. These comments are one line only, but * it should be enough. */MORE :{    "#" : IN_SINGLE_LINE_COMMENT}<IN_SINGLE_LINE_COMMENT>SPECIAL_TOKEN :{    <SINGLE_LINE_COMMENT : "\n" | "\r" | "\r\n" > : DEFAULT}<IN_SINGLE_LINE_COMMENT>MORE :{    < ~[] >}/** * Keywords used in the language.  */TOKEN :{    < KAS	: "as"	    >|   < KATE	: "ate"	    >    |   < KDATE	: "date"    >|   < KEXISTS	: "exists"  >|   < KFINAL	: "final"   >|   < KFORALL	: "forall"  >|   < KFORMULA	: "formula" >|   < KIN	: "in"	    >|   < KNUMBER	: "number"  >|   < KPI	: "pi"	    >|   < KRENAME	: "rename"  >|   < KSET	: "set"	    >|   < KSTRING	: "string"  >}/** * Literals, that is integers, reals and strings. Lateron are the numbers * translated to floats, so internally all numbers are comparable. */TOKEN :{    < INTEGER_LITERAL	: ["1"-"9"](["0"-"9"])* >|   < REAL_LITERAL	: 	(["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?    |	(["0"-"9"])+ (<EXPONENT>)?     >|   < #EXPONENT		: ["e","E"](["+","-"])?(["0"-"9"])+ >|   < STRING_LITERAL	:	"\""	(	    (~["\"", "\\", "\n", "\r"])	|   ("\\"(["n", "t", "b", "r", "f", "\\", "'", "\""]))	)*	"\""    >}/**  * Identifiers, either for defining attributes as well for defining formula * names of parameter name. */TOKEN :{    < PIID	    : "pi" "." <IDENTIFIER>		>|   < ATEID	    : "ate" "." <IDENTIFIER>		>|   < ID	    : <IDENTIFIER>			>|   < #IDENTIFIER   : <STARTLETTER> (<LETTER>|<DIGIT>)* >|   < #STARTLETTER  : ["a" - "z","A" - "Z"]		>|   < #LETTER	    : ["a" - "z","A" - "Z","-", "_"]    >|   < #DIGIT	    : ["0" - "9"]			>}/**  * Separators used in the language for well separating :-).  */TOKEN :{    < LPAREN	    : "(" >|   < RPAREN	    : ")" >|   < LBRACE	    : "{" >|   < RBRACE	    : "}" >|   < LBRACKET	    : "[" >|   < RBRACKET	    : "]" >|   < BAR	    : "|" >|   < SEMICOLON	    : ";" >|   < COMMA	    : "," >|   < DOT	    : "." >|   < COLON	    : ":" >}/**  * Operators, propositional ones as well as LTL ones and comparing operators. * For expressing numeral expressions, some are added too, like +, -, ... */TOKEN :{    < ASSIGN	    : ":="  >|   < GT	    : ">"   >|   < LT	    : "<"   >|   < PNOT	    : "!"   >|   < SLASH	    : "/"   >|   < PLUS	    : "+"   >|   < MINUS	    : "-"   >|   < STAR	    : "*"   >|   < EQ	    : "=="  >|   < LE	    : "<="  >	|   < GE	    : ">="  >|   < NE	    : "!="  >|   < REQ	    : "~="  >|   < POR	    : "\\/" >|   < PAND	    : "/\\" >|   < PIMPLIES	    : "->"  >|   < PBIIMPLIES    : "<->" >|   < LALWAYS	    : "[]"  >|   < LEVENTUALLY   : "<>"  >|   < LNEXTTIME	    : "_O"  >|   < LUNTIL	    : "_U"  >}/**  * The grammar of the LTL language is defined below as production rules * decorated with some context checking in java. */void parse() :{}{    (	attributeDefinition()    |	renaming()    |	formulaDefinition()    )*    <EOF>}void attributeDefinition() :{}{    (	numberAttributeDef()    |	stringAttributeDef()    |	setAttributeDef()    |	dateAttributeDef()    )}void numberAttributeDef() :{    Token id;    String name;    int scope;}{    "number"    (		LOOKAHEAD(2)	id = <PIID>	{ scope = Attribute.PI; }    |	id = <ATEID>	{ scope = Attribute.ATE; }    )        { name = id.image; }    ";"    {	if (! idAlreadyExists( id )) {	    attributes.add( name, new NumberAttribute( name, scope));        } else {	    throw new ParseException(		    quote(id) + at(id) + "already defined.");	};    }}void stringAttributeDef() :{    Token id;    String name;    int scope;}{    "string"    (	LOOKAHEAD(2)	id = <PIID>	{ scope = Attribute.PI; }    |	id = <ATEID>	{ scope = Attribute.ATE; }    )    { name = id.image; }    ";"     {	if (! idAlreadyExists( id )) {	    attributes.add( name, new StringAttribute( name, scope));        } else {	    throw new ParseException(quote(id) + at(id) + "already defined.");	};    }}void dateAttributeDef() :{    Token id;    String name;    Token datePattern;    int scope;}{    "date"    (	LOOKAHEAD(2)	id = <PIID>	{ scope = Attribute.PI; }    |	id = <ATEID>	{ scope = Attribute.ATE; }    )    { name = id.image; }    ":="    datePattern = <STRING_LITERAL>    ";"     {	if (! idAlreadyExists( id )) {	    attributes.add( name, 		    new DateAttribute( name, scope, datePattern.image) );        } else {	    throw new ParseException(quote(id) + at(id) + "already defined.");	};    }}void setAttributeDef() :{    Token id;    String name;    int scope;}{    "set"    (	LOOKAHEAD(2)	id = <PIID>	{ scope = Attribute.PI; }    |	id = <ATEID>	{ scope = Attribute.ATE; }    )    { name = id.image; }    ";"     {	if (! idAlreadyExists( id )) {	    attributes.add( name, 		    new SetAttribute( name, scope) );        } else {	    throw new ParseException(quote(id) + at(id) + "already defined.");	};    }}void renaming() :{    Token newId, oldId;    String newName, oldName;}{    "rename"    (	LOOKAHEAD(2)	oldId = <PIID>  { oldName = oldId.image; }    |	oldId = <ATEID> { oldName = oldId.image; }    )    "as"    newId = <ID>    { newName = newId.image; }    ";"    {	if ( attributes.exists( oldId.image ) ) {	    if ( ! idAlreadyExists( newId )) {		renamings.add( newName, oldName );	    } else {		throw new ParseException(quote(newId) + at(newId) +		    "is already defined, so " + quote(oldId) +		    " can not renamed to " + quote(newId) + ".");	    };	} else {	   throw new ParseException(quote(oldId) + at(oldId) +		"is not defined, so it can not be renamed.");	};    }}void formulaDefinition() :{}{    finalFormula()   |   formula()}void finalFormula() #FinalFormula :{    Token formula;    ArrayList localVars = new ArrayList();}{    "final"     { 	jjtThis.setType(SimpleNode.FINALFORMULA);     }    "formula"    formula = <ID>    { 	jjtThis.setName( formula );     }    ":="    props( localVars )    ";"    {	if ( ! idAlreadyExists( formula )) {	    formulae.add( formula.image, jjtThis );	} else {	    // The name already exists, so give an error	    throw new ParseException( quote(formula) + at(formula) +		"is already defined.");	};    }}void formula() #Formula :{    Token formula;    String name;    ArrayList localVars = new ArrayList();}{    "formula"    formula = <ID>    {	name = formula.image;	jjtThis.setName( formula );	jjtThis.setType( SimpleNode.FORMULA );    }    "("    [argList( localVars )]    {	parameters.add( name, (ArrayList) localVars.clone() );    }    ")"    ":="    props( localVars )    ";"    {	if ( ! idAlreadyExists( formula )) {	    formulae.add( name, jjtThis );	} else {	    // The name already exists, so give an error	    throw new ParseException( quote(formula) + at(formula) +		"is already defined.");	};    }}void arg( ArrayList localVars ) :{    Token attribute;    Token param;    Variable var;}{       (    	param = <ID> 	{	    if (idAlreadyExists( param ) || localVars.contains( param.image )) {		throw new ParseException( quote(param) + at(param) +			"already defined, so it can not be used as a name " +			"for a parameter.");	    };	}	":"	(	    attribute = <ID>	|   attribute = <PIID>	|   attribute = <ATEID>	)	{	    if (! idAlreadyExists( attribute )) {		throw new ParseException( quote( attribute ) + at( attribute )			+ "is not defined, so it can not be used as attribute"			+ "-type.");	    } else {		var = new Variable( param.image, attribute.image );		localVars.add( var );	    };	}    )    //{//	return jjtThis;  //  }}void argList( ArrayList localVars ) :{    Token attribute;    Token param;}{       arg( localVars )    ("," arg( localVars ))*    //{//	return jjtThis;  //  }}SimpleNode props( ArrayList localVars )  #Proposition :{    Token attribute;    Token formula;    Token tok;    String attributeName;    SimpleNode attr;    SimpleNode dum;    int type;    Variable var;}{       unOp() "(" props( localVars ) ")"    {	jjtThis.setType(SimpleNode.UNPROP);	return jjtThis;    }|   LOOKAHEAD(3)    "(" props( localVars )  biOp()  props( localVars ) ")"    {	jjtThis.setType(SimpleNode.BIPROP);	return jjtThis;    }|   "forall" "["     dum = dummy()     {	// add dum to the list of parameters	var = new Variable( dum.getName(), dum.getAttribute() );	localVars.add(var);    }    "|" props( localVars ) "]"    {	jjtThis.setType(SimpleNode.FORALL);	return jjtThis;    }|   "exists" "["     dum = dummy()     {	// add dum to the list of parameters	var = new Variable( dum.getName(), dum.getAttribute() );	localVars.add(var);    }    "|" props( localVars ) "]"    {	jjtThis.setType(SimpleNode.EXISTS);	return jjtThis;    }|   LOOKAHEAD(3)    attr = attributeId()     {		type = getType(attr.getName()());    }	    compOp(type) expr(type, localVars)    {	jjtThis.setType(SimpleNode.COMPPROP);	return jjtThis;    }|   LOOKAHEAD(3)    attr = attributeId()     {		type = getType(attr.getName()());    }	     tok = "in"     "{" [stringList()] "}"    {    	if ( ! (type == SET)) {	    throw new ParseException( "'" + attr.getName()() + "'" + at(tok) +		"is not of type string.");	};	jjtThis.setType(SimpleNode.IN);	return jjtThis;    }|   LOOKAHEAD(3)    formula = <ID>     "(" [valList( formula.image, localVars)] ")"    { 	if (! idAlreadyExists(formula)) {	    throw new ParseException("'" + formula.image + "'" + 		" at " + formula.beginLine + "," + formula.beginColumn +		" does not exists.");	} else if (! (getType(formula) == FORMULA)) {	    // must be final formula to be called without arguments.	    throw new ParseException("'" + formula.image + "'" + 		" at " + formula.beginLine + "," + formula.beginColumn +		" is a not a formula (Maybe it is final?).");	};	jjtThis.setName(formula);	jjtThis.setType(SimpleNode.USEFORMULA);	return jjtThis;    }|   LOOKAHEAD(3)    formula = <ID>    { 	if (! idAlreadyExists(formula)) {	    throw new ParseException("'" + formula.image + "'" + 		" at " + formula.beginLine + "," + formula.beginColumn +		" does not exists.");	} else if (! (getType(formula) == FINAL)) {	    // must be final formula to be called without arguments.	    throw new ParseException("'" + formula.image + "'" + 		" at " + formula.beginLine + "," + formula.beginColumn +		" is not a final formula.");	};	jjtThis.setName(formula);	jjtThis.setType(SimpleNode.USESTATICFORMULA);	return jjtThis;    }}SimpleNode attributeId() #Attribute :{    Token id;}{    (id = <ID>|   id = <PIID>|   id = <ATEID>)    { 	if ( ! idAlreadyExists(id)) {	    throw new ParseException( quote(id) + at(id) +		"does not exist.");	} else if ( ! (getType(id) < FORMULA)) {	    throw new ParseException( quote(id) + at(id) +		"is not an defined attribute.");	};	jjtThis.setName(id);	jjtThis.setType(SimpleNode.ATTRIBUTE);	return jjtThis;    }}SimpleNode valId( ArrayList localVars) #ValueAttribute :{    Token id;}{    (id = <ID>|   id = <PIID>|   id = <ATEID>)    { 	// If id a local var, then it is ok, else not	if ( ! localVars.contains(id.image)) {	    throw new ParseException( quote(id) + at(id) +		"is no local parameter in this context.");	};	jjtThis.setName(id);	jjtThis.setType(SimpleNode.ARGUMENT);	return jjtThis;    }}SimpleNode literal() #Literal : {    Token tok;    String text;}{    (	tok = <STRING_LITERAL>	{	    text = tok.image;	    if (text.length() == 0) {		jjtThis.setName("");	    } else {		// there is text, so cut the """"		jjtThis.setName(text.substring(1,text.length() - 1));	    };	    jjtThis.setType(SimpleNode.STRING);	}    |	tok = <INTEGER_LITERAL>	{	    jjtThis.setName(tok);	    jjtThis.setType(SimpleNode.INT);	}    |	tok = <REAL_LITERAL>	{	    jjtThis.setName(tok);	    jjtThis.setType(SimpleNode.REAL);	}    )    {	return jjtThis;    }}SimpleNode valList( String formula, ArrayList localVars) #Values :{}{        ( 	valId( localVars )    |	literal()    )    (	","	(	    valId( localVars )	|   literal()	)    )*    {	jjtThis.setType(SimpleNode.VALLIST);	return jjtThis;    }}SimpleNode unOp() #UnOp :{}{       "[]"{return jjtThis;}|   "<>"{return jjtThis;}|   "_O"{return jjtThis;}|   "!"{return jjtThis;}}SimpleNode biOp() #BiOp :{}{    "/\\"{return jjtThis;}|   "\\/"{return jjtThis;}|   "->"{return jjtThis;}|   "<->"{return jjtThis;}|   "_U"{return jjtThis;}}SimpleNode dummy() #DummyVar:{    Token attribute;    Token id;}{    id = <ID>    ":"    (	attribute = <ID>    |	attribute = <PIID>    |	attribute = <ATEID>    )    {	if (! (getType(attribute) == SET)) {	    // error, quantification must over sets	    throw new ParseException("'" + attribute.image + "' at " + 	    attribute.beginLine + "," + attribute.beginColumn +	    " is not of type set, so it can not be used for quantification."	    );	};    }    {	jjtThis.setAttribute(attribute.image);	jjtThis.setName(id.image);	return jjtThis;}}SimpleNode compOp(int type) #CompOp :{    Token t;}{    t = "<"    {return jjtThis;}|   t = ">"    {return jjtThis;}|   t = "<="    {return jjtThis;}|   t = ">="    {return jjtThis;}|   t = "=="    {return jjtThis;}|   t = "!="    {return jjtThis;}|   t = "~="    { 	if (type != STRING) {	// this operator does not exists then	throw new ParseException("'~=' at " + 	    t.beginLine + "," + t.beginColumn +	    " can not be used with attribute on left hand side."	    );	}    }    {return jjtThis;}}SimpleNode expr(int type, ArrayList localVars) #Expr :{    Token t;}{    (	t = "-"	expr(type, localVars)    |	t = "(" 	expr(type, localVars)  	numOp()  	expr(type, localVars) 	")"    |	t = <INTEGER_LITERAL>    |	t = <REAL_LITERAL>    )    { 	if (! (type == NUMBER)) {	    //Only when dealing with numbers, a minus sign is usefull	    throw new ParseException("'-' at " + 	    t.beginLine + "," + t.beginColumn +	    " can only be applied when attribute on left hand side has type"	    + " 'number'."	    );	};    return jjtThis;    }|   t = <STRING_LITERAL>    { 	if (! ((type == STRING) || (type == SET) || (type ==	    DATE))) {	    //Only when dealing with numbers, a minus sign is usefull	    throw new ParseException("'" + t.image + "' at " + 	    t.beginLine + "," + t.beginColumn +	    " can only be applied when attribute on left hand side has type"	    + " 'string', 'set' or 'date'."	    );	};    }	        {return jjtThis;}|   ( 	t = <ID>    |	t = <PIID>    |	t = <ATEID>    )    {	if (! (idAlreadyExists(t))) {	    // unknown id	    throw new ParseException("'" + t.image + "' at " + 	    t.beginLine + "," + t.beginColumn +	    " is not defined."	    );	} else if (! isAttributeId(t)) {	    // is formula	    throw new ParseException("'" + t.image + "' at " + 	    t.beginLine + "," + t.beginColumn +	    " is not an attribute but an formula."	    );	} else if (! (getType(t) == type)) {	    // wrong type	    throw new ParseException("'" + t.image + "' at " + 	    t.beginLine + "," + t.beginColumn +	    " has not the right type (that is, that of the left hand side"	    + " attribute."	    );	};	    	return jjtThis;    }}SimpleNode numOp() #NumOp :{}{    "+"    {return jjtThis;}|   "-"    {return jjtThis;}|   "*"    {return jjtThis;}|   "/"    {return jjtThis;}}SimpleNode stringList() #StringList :{    ArrayList strings = new ArrayList();    Token st;    String s;}{       st = <STRING_LITERAL>     { s = st.image; strings.add(s.substring(1,s.length() - 1)); }	(	"," 	st = <STRING_LITERAL>	{ s = st.image; strings.add(s.substring(1,s.length() - 1)); }	)*    {	jjtThis.setStrings(strings);	return jjtThis;    }}
