/***********************************************************
 *      This software is part of the ProM package          *
 *             http://www.processmining.org/               *
 *                                                         *
 *            Copyright (c) 2003-2007 TU/e Eindhoven       *
 *                and is licensed under the                *
 *            Common Public License, Version 1.0           *
 *        by Eindhoven University of Technology            *
 *           Department of Information Systems             *
 *                 http://is.tm.tue.nl                     *
 *                                                         *
 **********************************************************/

package org.processmining.analysis.benchmark.metric;

import org.processmining.converting.PetriNetToHeuristicNetConverter;
import org.processmining.framework.log.LogReader;
import org.processmining.framework.models.heuristics.HeuristicsNet;
import org.processmining.framework.models.petrinet.PetriNet;
import org.processmining.framework.ui.Progress;
import org.processmining.mining.geneticmining.fitness.Fitness;
import org.processmining.mining.geneticmining.fitness.FitnessFactory;
import org.processmining.mining.geneticmining.fitness.duplicates.DTFitnessFactory;

/**
 * 
 * @author Ana Karla A. de Medeiros
 * @version 1.0
 */
public class ProperCompletionFitnessMetric implements BenchmarkMetric {
	public ProperCompletionFitnessMetric() {
	}

	/**
	 * Calculates the proper completion fitness of a model for a log.
	 * 
	 * @param model
	 *            The resulting Petri net generated by a mining algorithm.
	 * @param referenceLog
	 *            The log to be used during the calculation of the proper
	 *            completion fitness value.
	 * @param referenceModel
	 *            This parameter is not used and, therefore, can be
	 *            <code>null</code>
	 * @param progress
	 *            Progress
	 * @return The proper completion fitness value (<code>[0, 1]</code>) of the
	 *         mined model. If the this value cannot be calculated,
	 *         <code>BenchmarkMetric.INVALID_MEASURE_VALUE</code> is returned.
	 */
	public double measure(PetriNet model, LogReader referenceLog,
			PetriNet referenceModel, Progress progress) {

		// check precondition: no shared inputs for duplicate tasks
		if (model.hasDuplicatesWithSharedInputPlaces() == true) {
			return BenchmarkMetric.INVALID_MEASURE_VALUE;
		}

		try {
			HeuristicsNet HNmodel = new PetriNetToHeuristicNetConverter()
					.toHeuristicsNet(PetriNetToHeuristicNetConverter
							.removeUnnecessaryInvisibleTasksFromPetriNet((PetriNet) model
									.clone()));

			Fitness fitness = FitnessFactory.getFitness(
					FitnessFactory.PROPER_COMPLETION_INDEX, referenceLog,
					DTFitnessFactory.ALL_FITNESS_PARAMETERS);
			HeuristicsNet[] result = fitness
					.calculate(new HeuristicsNet[] { HNmodel });

			return result[0].getFitness();

		} catch (Exception e) {

			System.err
					.println("ProperCompletionFitnessMetric >>> Could not calculate the proper completion fitness value!");
			e.printStackTrace();

		}
		return BenchmarkMetric.INVALID_MEASURE_VALUE;
	}

	/**
	 * @return The name of this benchmark metric: Fitness - Proper Completion
	 */
	public String name() {
		return "Fitness Parsing Measure PM";
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.processmining.analysis.benchmark.metric.BenchmarkMetric#description()
	 */
	public String description() {
		return "The metric  <b>fitness parsing measure PM</b> "
				+ "quantifies which percentage of the traces in a log can also be generated by the mined model.";

	}

	/**
	 * This metric needs a reference log.
	 * 
	 * @return <code>true</code>
	 */
	public boolean needsReferenceLog() {
		return true;
	}

	/**
	 * This metric does not need a reference model.
	 * 
	 * @return <code>false</code>
	 */

	public boolean needsReferenceModel() {
		return false;
	}
}
