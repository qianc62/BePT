/***********************************************************
 *      This software is part of the ProM package          *
 *             http://www.processmining.org/               *
 *                                                         *
 *            Copyright (c) 2003-2007 TU/e Eindhoven       *
 *                and is licensed under the                *
 *            Common Public License, Version 1.0           *
 *        by Eindhoven University of Technology            *
 *           Department of Information Systems             *
 *                 http://is.tm.tue.nl                     *
 *                                                         *
 **********************************************************/

package org.processmining.analysis.benchmark.metric;

import org.processmining.converting.PetriNetToHeuristicNetConverter;
import org.processmining.framework.log.LogReader;
import org.processmining.framework.models.heuristics.HeuristicsNet;
import org.processmining.framework.models.petrinet.PetriNet;
import org.processmining.framework.ui.Progress;
import org.processmining.mining.geneticmining.analysis.duplicates.TraceParsing;

/**
 * 
 * @author Ana Karla A. de Medeiros
 * @version 1.0
 */
public class BehavioralPrecisionMetric implements BenchmarkMetric {
	public BehavioralPrecisionMetric() {
	}

	/**
	 * Calculates the "Behavioral Precision" metric for a given model with
	 * respect to a log and a reference model.
	 * 
	 * @param model
	 *            The resulting Petri net generated by a mining algorithm.
	 * @param referenceLog
	 *            The log to be used during the calculation of the behavioral
	 *            precision value of the mined model.
	 * @param referenceModel
	 *            The Petri net used to measure behavioral precision of the
	 *            mined model.
	 * @param progress
	 *            Progress
	 * @return The behavioral precision value (<code>[0, 1]</code>) of the mined
	 *         model. If the behavioral precision value cannot be calculated,
	 *         the value <code>BenchmarkMetric.INVALID_MEASURE_VALUE</code> is
	 *         returned.
	 */
	public double measure(PetriNet model, LogReader referenceLog,
			PetriNet referenceModel, Progress progress) {

		// check precondition: no shared inputs for duplicate tasks
		if (model.hasDuplicatesWithSharedInputPlaces() == true
				|| referenceModel.hasDuplicatesWithSharedInputPlaces() == true) {
			return BenchmarkMetric.INVALID_MEASURE_VALUE;
		}

		// convert to HN to calculate metric
		try {
			HeuristicsNet HNmodel = new PetriNetToHeuristicNetConverter()
					.toHeuristicsNet(PetriNetToHeuristicNetConverter
							.removeUnnecessaryInvisibleTasksFromPetriNet((PetriNet) model
									.clone()));
			HeuristicsNet HNreferenceModel = new PetriNetToHeuristicNetConverter()
					.toHeuristicsNet(PetriNetToHeuristicNetConverter
							.removeUnnecessaryInvisibleTasksFromPetriNet((PetriNet) referenceModel
									.clone()));
			TraceParsing behavioralMetrics = new TraceParsing(referenceLog,
					HNreferenceModel, HNmodel);
			return behavioralMetrics.getPrecision();
		} catch (Exception e) {
			System.err
					.println("BehavioralPrecisionMetric >>> Could not calculate the behavioral precision value!");
			e.printStackTrace();

		}
		return BenchmarkMetric.INVALID_MEASURE_VALUE;
	}

	/**
	 * 
	 * @return A human-readable name of this metric (less than 30 characters,
	 *         preferably)
	 * @todo Implement this
	 *       org.processmining.analysis.benchmark.metric.BenchmarkMetric method
	 */
	public String name() {
		return "Behavioral Precision BP";
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.processmining.analysis.benchmark.metric.BenchmarkMetric#description()
	 */
	public String description() {
		return "The metric <b>behavioral precision B<sub>P</sub></b> measures "
				+ "how much extra behavior the <i>mined</i> model allows for with respect "
				+ "to a given <i>reference</i> model and <i>log.</i> "
				+ "This metric is calculated by measuring the intersection between the set "
				+ "of enabled tasks that the	mined and reference models have at every moment "
				+ "of the log replay. This intersection is further weighed by the frequency "
				+ "of traces in the log. See also the metric <b>behavioral recall B<sub>R</sub></b>.";
	}

	/**
	 * This metric needs a reference log.
	 * 
	 * @return <code>true</code>
	 */
	public boolean needsReferenceLog() {
		return true;
	}

	/**
	 * This metric needs a reference model.
	 * 
	 * @return <code>true</code>
	 */

	public boolean needsReferenceModel() {
		return true;
	}
}
