package org.processmining.exporting.fsm;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.Random;

import org.processmining.exporting.Exporter;
import org.processmining.framework.models.ModelGraphEdge;
import org.processmining.framework.models.fsm.AcceptFSM;
import org.processmining.framework.models.fsm.FSMState;
import org.processmining.framework.models.fsm.FSMTransition;
import org.processmining.mining.fsm.FsmMinerPayload;

/**
 * <p>
 * Title: LogExport
 * </p>
 * 
 * <p>
 * Description: Exports 50 runs to an MXML log file
 * </p>
 * 
 * <p>
 * Copyright: Copyright (c) 2004
 * </p>
 * 
 * <p>
 * Company: TU/e
 * </p>
 * 
 * @author Eric Verbeek
 * @version 1.0
 * 
 *          Code rating: Red
 * 
 *          Review rating: Red
 */
public class LogExport {

	@Exporter(name = "Log file", help = "http://www.win.tue.nl/~hverbeek/doku.php?id=projects:prom:plug-ins:export:fsm2log", extension = "mxml")
	public static void LogExport(AcceptFSM fsm, OutputStream out)
			throws IOException {
		LogExportParameters parameters = new LogExportParameters();
		LogExportUI ui = new LogExportUI(parameters);
		ui.setVisible(true);

		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(out));

		exportProlog(fsm, bw);
		for (int i = 0; i < parameters.nofInstances; i++) {
			exportInstance(fsm, bw, i);
		}
		exportEpilog(fsm, bw);
		bw.close();
	}

	private static void exportProlog(AcceptFSM fsm, BufferedWriter bw)
			throws IOException {
		bw.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
		bw.write("<!-- generated by TS2Log -->\n");
		bw
				.write("<WorkflowLog xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"WorkflowLog.xsd\" description=\"Generated by TS2Log\">\n");
		bw.write("\t<Process id=\"" + fsm.getName()
				+ "\" description=\"Log generated from TS "
				+ fsm.getIdentifier() + "\">\n");
	}

	private static void exportInstance(AcceptFSM fsm, BufferedWriter bw, int i)
			throws IOException {
		Random generator = new Random();
		bw.write("\t\t<ProcessInstance id=\"instance " + i
				+ "\" description=\"Instance generated from TS "
				+ fsm.getIdentifier() + "\">\n");
		exportAuditTrailEntries(fsm, (FSMState) fsm.getStartState(), bw,
				generator);
		bw.write("\t\t</ProcessInstance>\n");
	}

	private static void exportAuditTrailEntries(AcceptFSM fsm, FSMState s,
			BufferedWriter bw, Random generator) throws IOException {
		FSMState state = s;
		int nofSuccessors = state.outDegree();
		int successor;
		while (nofSuccessors > 0) {
			if (nofSuccessors == 1) {
				successor = 0;
			} else {
				successor = generator.nextInt(nofSuccessors);
			}
			ModelGraphEdge edge = (ModelGraphEdge) state.getOutEdges().get(
					successor);
			String condition = ((FSMTransition) edge).getCondition();
			if (condition.length() > 0) {
				String element, eventtype;
				bw.write("\t\t\t<AuditTrailEntry>\n");
				int newline = condition.indexOf("\\n");
				if (newline > 0) {
					element = condition.substring(0, newline);
					eventtype = condition.substring(newline + 2);
				} else {
					element = condition;
					eventtype = "complete";
				}
				bw.write("\t\t\t\t<WorkflowModelElement>" + element
						+ "</WorkflowModelElement>\n");
				bw.write("\t\t\t\t<EventType>" + eventtype + "</EventType>\n");
				bw.write("\t\t\t</AuditTrailEntry>\n");
			}
			state = (FSMState) edge.getDest();
			nofSuccessors = state.outDegree();
		}
	}

	private static void exportEpilog(AcceptFSM fsm, BufferedWriter bw)
			throws IOException {
		bw.write("\t</Process>\n");
		bw.write("</WorkflowLog>\n");
	}
}
